/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "i2c-lcd.h"
#include <string.h>
#include <stdio.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

// GPIO Pin Definitions (Updated to match IOC configuration)
#define KEYPAD_ROW1_Port GPIOA
#define KEYPAD_ROW1_Pin GPIO_PIN_6
#define KEYPAD_ROW2_Port GPIOA
#define KEYPAD_ROW2_Pin GPIO_PIN_7
#define KEYPAD_ROW3_Port GPIOB
#define KEYPAD_ROW3_Pin GPIO_PIN_6
#define KEYPAD_ROW4_Port GPIOC
#define KEYPAD_ROW4_Pin GPIO_PIN_7

#define KEYPAD_COL1_Port GPIOA
#define KEYPAD_COL1_Pin GPIO_PIN_9
#define KEYPAD_COL2_Port GPIOA
#define KEYPAD_COL2_Pin GPIO_PIN_8
#define KEYPAD_COL3_Port GPIOB
#define KEYPAD_COL3_Pin GPIO_PIN_10
#define KEYPAD_COL4_Port GPIOB
#define KEYPAD_COL4_Pin GPIO_PIN_4

#define RELAY_Port GPIOB
#define RELAY_Pin GPIO_PIN_0
#define BUZZER_Port GPIOB
#define BUZZER_Pin GPIO_PIN_1
#define LED_GREEN_Port GPIOA
#define LED_GREEN_Pin GPIO_PIN_5
#define LED_RED_Port GPIOA
#define LED_RED_Pin GPIO_PIN_10

// System Configuration
#define CORRECT_PIN "1234"
#define PIN_LENGTH 4
#define MAX_ATTEMPTS 3
#define LOCKOUT_TIME 30000  // 30 seconds in milliseconds
#define RELAY_ON_TIME 3000  // 3 seconds door unlock time

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

UART_HandleTypeDef huart2;

/* USER CODE BEGIN PV */

// System State Variables
static char entered_pin[PIN_LENGTH + 1] = {0};
static uint8_t pin_index = 0;
static uint8_t failed_attempts = 0;
static uint32_t lockout_start_time = 0;
static uint8_t system_locked = 0;
static uint32_t relay_start_time = 0;
static uint8_t relay_active = 0;

// Keypad mapping
static char keypad_map[4][4] = {
    {'1', '2', '3', 'A'},
    {'4', '5', '6', 'B'},
    {'7', '8', '9', 'C'},
    {'*', '0', '#', 'D'}
};

// GPIO port arrays for easier scanning
static GPIO_TypeDef* row_ports[4] = {KEYPAD_ROW1_Port, KEYPAD_ROW2_Port, KEYPAD_ROW3_Port, KEYPAD_ROW4_Port};
static uint16_t row_pins[4] = {KEYPAD_ROW1_Pin, KEYPAD_ROW2_Pin, KEYPAD_ROW3_Pin, KEYPAD_ROW4_Pin};
static GPIO_TypeDef* col_ports[4] = {KEYPAD_COL1_Port, KEYPAD_COL2_Port, KEYPAD_COL3_Port, KEYPAD_COL4_Port};
static uint16_t col_pins[4] = {KEYPAD_COL1_Pin, KEYPAD_COL2_Pin, KEYPAD_COL3_Pin, KEYPAD_COL4_Pin};

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_I2C1_Init(void);
static void MX_USART2_UART_Init(void);

/* USER CODE BEGIN PFP */
char keypad_scan(void);
void process_key(char key);
void check_pin(void);
void grant_access(void);
void deny_access(void);
void reset_pin_entry(void);
void update_display(void);
void buzzer_beep(uint16_t duration);
void system_update(void);
void monitor_column_states(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/**
 * @brief Scan the 4x4 keypad matrix
 * @retval char: Pressed key character, or 0 if no key pressed
 */
char keypad_scan(void) {
    static char last_key = 0;
    static uint32_t last_press_time = 0;
    char current_key = 0;

    // Scan each row
    for (int row = 0; row < 4; row++) {
        // Set all rows HIGH first
        for (int i = 0; i < 4; i++) {
            HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
        }

        // Set current row LOW
        HAL_GPIO_WritePin(row_ports[row], row_pins[row], GPIO_PIN_RESET);

        // Small delay for signal stability
        HAL_Delay(1);

        // Check each column
        for (int col = 0; col < 4; col++) {
            if (HAL_GPIO_ReadPin(col_ports[col], col_pins[col]) == GPIO_PIN_RESET) {
                current_key = keypad_map[row][col];
                break;
            }
        }

        if (current_key != 0) break;
    }

    // Set all rows HIGH after scanning
    for (int i = 0; i < 4; i++) {
        HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
    }

    // Debouncing: only return key if it's different from last or enough time has passed
    uint32_t current_time = HAL_GetTick();
    if (current_key != last_key || (current_time - last_press_time) > 300) {
        last_key = current_key;
        last_press_time = current_time;
        return current_key;
    }

    return 0; // No valid key press
}

/**
 * @brief Process a key press
 * @param key: Character of the pressed key
 */
void process_key(char key) {
    if (key == 0) return; // No key pressed

    buzzer_beep(100); // Short beep for feedback

    if (key >= '0' && key <= '9') {
        // Numeric key pressed
        if (pin_index < PIN_LENGTH) {
            entered_pin[pin_index] = key;
            pin_index++;
            update_display();
        }
    }
    else if (key == '#') {
        // Enter/Submit key
        if (pin_index == PIN_LENGTH) {
            check_pin();
        } else {
            // Not enough digits entered
            lcd_clear();
            lcd_put_cur(0, 0);
            lcd_send_string("Enter 4 digits!");
            lcd_put_cur(1, 0);
            lcd_send_string("Then press #");
            HAL_Delay(2000);
            reset_pin_entry();
        }
    }
    else if (key == '*') {
        // Clear/Reset key
        reset_pin_entry();
    }
    else if (key == 'A') {
        // Master reset (optional feature)
        failed_attempts = 0;
        system_locked = 0;
        reset_pin_entry();
        lcd_clear();
        lcd_put_cur(0, 0);
        lcd_send_string("System Reset");
        HAL_Delay(1000);
        update_display();
    }
}

/**
 * @brief Check if entered PIN is correct
 */
void check_pin(void) {
    entered_pin[PIN_LENGTH] = '\0'; // Null terminate

    if (strcmp(entered_pin, CORRECT_PIN) == 0) {
        grant_access();
    } else {
        deny_access();
    }

    reset_pin_entry();
}

/**
 * @brief Grant access - unlock door
 */
void grant_access(void) {
    failed_attempts = 0; // Reset failed attempts

    // Display success message
    lcd_clear();
    lcd_put_cur(0, 0);
    lcd_send_string("ACCESS GRANTED");
    lcd_put_cur(1, 0);
    lcd_send_string("Door Unlocked");

    // Turn on green LED and activate relay
    HAL_GPIO_WritePin(LED_GREEN_Port, LED_GREEN_Pin, GPIO_PIN_SET);
    HAL_GPIO_WritePin(LED_RED_Port, LED_RED_Pin, GPIO_PIN_RESET);
    HAL_GPIO_WritePin(RELAY_Port, RELAY_Pin, GPIO_PIN_SET);

    // Success beep pattern
    buzzer_beep(200);
    HAL_Delay(100);
    buzzer_beep(200);

    // Set relay timer
    relay_active = 1;
    relay_start_time = HAL_GetTick();

    HAL_Delay(1000);
}

/**
 * @brief Deny access - wrong PIN
 */
void deny_access(void) {
    failed_attempts++;

    // Display error message
    lcd_clear();
    lcd_put_cur(0, 0);
    lcd_send_string("ACCESS DENIED");
    lcd_put_cur(1, 0);
    char msg[16];
    sprintf(msg, "Attempts: %d/%d", failed_attempts, MAX_ATTEMPTS);
    lcd_send_string(msg);

    // Flash red LED
    for (int i = 0; i < 3; i++) {
        HAL_GPIO_WritePin(LED_RED_Port, LED_RED_Pin, GPIO_PIN_SET);
        buzzer_beep(300);
        HAL_Delay(200);
        HAL_GPIO_WritePin(LED_RED_Port, LED_RED_Pin, GPIO_PIN_RESET);
        HAL_Delay(200);
    }

    // Check if max attempts reached
    if (failed_attempts >= MAX_ATTEMPTS) {
        system_locked = 1;
        lockout_start_time = HAL_GetTick();

        lcd_clear();
        lcd_put_cur(0, 0);
        lcd_send_string("SYSTEM LOCKED");
        lcd_put_cur(1, 0);
        lcd_send_string("Wait 30 seconds");

        // Long error beep
        buzzer_beep(1000);
    }

    HAL_Delay(2000);
}

/**
 * @brief Reset PIN entry
 */
void reset_pin_entry(void) {
    memset(entered_pin, 0, sizeof(entered_pin));
    pin_index = 0;
    update_display();
}

/**
 * @brief Update LCD display based on current state
 */
void update_display(void) {
    if (system_locked) {
        uint32_t time_left = (LOCKOUT_TIME - (HAL_GetTick() - lockout_start_time)) / 1000;
        if (time_left > 99) time_left = 99; // Cap at 99 to prevent overflow

        lcd_clear();
        lcd_put_cur(0, 0);
        lcd_send_string("SYSTEM LOCKED");
        lcd_put_cur(1, 0);
        char msg[20]; // Increased buffer size
        sprintf(msg, "Wait: %lu sec", time_left);
        lcd_send_string(msg);
        return;
    }

    lcd_clear();
    lcd_put_cur(0, 0);
    lcd_send_string("Enter PIN:");

    lcd_put_cur(1, 0);
    // Display entered digits as asterisks
    for (int i = 0; i < pin_index; i++) {
        lcd_send_data('*');
    }

    // Show remaining digits as underscores
    for (int i = pin_index; i < PIN_LENGTH; i++) {
        lcd_send_data('_');
    }
}

/**
 * @brief Generate buzzer beep
 * @param duration: Beep duration in milliseconds
 */
void buzzer_beep(uint16_t duration) {
    HAL_GPIO_WritePin(BUZZER_Port, BUZZER_Pin, GPIO_PIN_SET);
    HAL_Delay(duration);
    HAL_GPIO_WritePin(BUZZER_Port, BUZZER_Pin, GPIO_PIN_RESET);
}

/**
 * @brief Update system timers and states
 */
void system_update(void) {
    uint32_t current_time = HAL_GetTick();

    // Handle relay auto-off
    if (relay_active && (current_time - relay_start_time) >= RELAY_ON_TIME) {
        HAL_GPIO_WritePin(RELAY_Port, RELAY_Pin, GPIO_PIN_RESET);
        HAL_GPIO_WritePin(LED_GREEN_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
        relay_active = 0;
        update_display();
    }

    // Handle system lockout
    if (system_locked && (current_time - lockout_start_time) >= LOCKOUT_TIME) {
        system_locked = 0;
        failed_attempts = 0;
        reset_pin_entry();
    }

    // Update display if locked (to show countdown)
    if (system_locked) {
        static uint32_t last_display_update = 0;
        if (current_time - last_display_update >= 1000) { // Update every second
            update_display();
            last_display_update = current_time;
        }
    }
}

/**
 * @brief Monitor column states during row scanning for debugging
 */
void monitor_column_states(void) {
    lcd_clear();
    lcd_put_cur(0, 0);
    lcd_send_string("Row Scan Test:");

    while(1) {
        // Test each row one by one
        for (int row = 0; row < 4; row++) {
            // Set all rows HIGH first
            for (int i = 0; i < 4; i++) {
                HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
            }

            // Set current row LOW
            HAL_GPIO_WritePin(row_ports[row], row_pins[row], GPIO_PIN_RESET);
            HAL_Delay(5); // Give time for signal to stabilize

            // Read all column states
            GPIO_PinState col1 = HAL_GPIO_ReadPin(KEYPAD_COL1_Port, KEYPAD_COL1_Pin);
            GPIO_PinState col2 = HAL_GPIO_ReadPin(KEYPAD_COL2_Port, KEYPAD_COL2_Pin);
            GPIO_PinState col3 = HAL_GPIO_ReadPin(KEYPAD_COL3_Port, KEYPAD_COL3_Pin);
            GPIO_PinState col4 = HAL_GPIO_ReadPin(KEYPAD_COL4_Port, KEYPAD_COL4_Pin);

            // Display results
            lcd_put_cur(1, 0);
            char msg[32];
            sprintf(msg, "R%d: %d %d %d %d     ", row+1, col1, col2, col3, col4);
            lcd_send_string(msg);

            HAL_Delay(500); // Show each row for 500ms
        }

        HAL_Delay(1000); // Pause between full scans

        // Now test with all rows HIGH (idle state)
        for (int i = 0; i < 4; i++) {
            HAL_GPIO_WritePin(row_ports[i], row_pins[i], GPIO_PIN_SET);
        }

        GPIO_PinState col1 = HAL_GPIO_ReadPin(KEYPAD_COL1_Port, KEYPAD_COL1_Pin);
        GPIO_PinState col2 = HAL_GPIO_ReadPin(KEYPAD_COL2_Port, KEYPAD_COL2_Pin);
        GPIO_PinState col3 = HAL_GPIO_ReadPin(KEYPAD_COL3_Port, KEYPAD_COL3_Pin);
        GPIO_PinState col4 = HAL_GPIO_ReadPin(KEYPAD_COL4_Port, KEYPAD_COL4_Pin);

        lcd_put_cur(1, 0);
        char idle_msg[32];
        sprintf(idle_msg, "IDLE: %d %d %d %d   ", col1, col2, col3, col4);
        lcd_send_string(idle_msg);
        HAL_Delay(500);
    }
}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART2_UART_Init();
  /* USER CODE BEGIN 2 */

  // Initialize LCD
  lcd_init(&hi2c1);
  HAL_Delay(100);

  // Welcome message
  lcd_clear();
  lcd_put_cur(0, 0);
  lcd_send_string("Door Lock System");
  lcd_put_cur(1, 0);
  lcd_send_string("Initializing...");
  HAL_Delay(2000);

  // Initial display update
  reset_pin_entry();

  // Initial LED states
  HAL_GPIO_WritePin(LED_GREEN_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(LED_RED_Port, LED_RED_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(RELAY_Port, RELAY_Pin, GPIO_PIN_RESET);
  HAL_GPIO_WritePin(BUZZER_Port, BUZZER_Pin, GPIO_PIN_RESET);

  // Startup beep
  buzzer_beep(200);

  monitor_column_states();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

//	// Update system state
//	system_update();
//
//	// Only process keypad if system is not locked
//	if (!system_locked) {
//		char key = keypad_scan();
//		if (key != 0) {
//			process_key(key);
//		}
//	}
//
//	// Small delay to prevent excessive CPU usage
//	HAL_Delay(50);

  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 100000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);

  /*Configure GPIO pins : PA5 PA6 PA7 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pins : PB0 PB1 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : PA8 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
#ifdef USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
